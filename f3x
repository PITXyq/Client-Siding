-- [Infinite Yield Script - Modified for F3X Launcher Tool & Conceptual Peer Sync]

-- Start of IY_LOADED and utility functions
if IY_LOADED and not _G.IY_DEBUG == true then
    return
end
pcall(function() getgenv().IY_LOADED = true end)
if not game:IsLoaded() then game.Loaded:Wait() end

function missing(t, f, fallback)
    if type(f) == t then return f end
    return fallback or nil
end
cloneref = missing("function", cloneref, function(...) return ... end)
sethidden =  missing("function", sethiddenproperty or set_hidden_property or set_hidden_prop)
gethidden =  missing("function", gethiddenproperty or get_hidden_property or get_hidden_prop)
queueteleport =  missing("function", queue_on_teleport or (syn and syn.queue_on_teleport) or (fluxus and fluxus.queue_on_teleport))
httprequest =  missing("function", request or http_request or (syn and syn.request) or (http and http.request) or (fluxus and fluxus.request)) -- Used by peer sync
everyClipboard = missing("function", setclipboard or toclipboard or set_clipboard or (Clipboard and Clipboard.set))
firetouchinterest = missing("function", firetouchinterest)
waxwritefile, waxreadfile = writefile, readfile
writefile = missing("function", waxwritefile) and function(file, data, safe)
    if safe == true then return pcall(waxwritefile, file, data) end
    waxwritefile(file, data)
end
readfile = missing("function", waxreadfile) and function(file, safe)
    if safe == true then return pcall(waxreadfile, file) end
    return waxreadfile(file)
end
isfile = missing("function", isfile, readfile and function(file)
    local success, result = pcall(function()
        return readfile(file)
    end)
    return success and result ~= nil and result ~= ""
end)
makefolder = missing("function", makefolder)
isfolder = missing("function", isfolder)
waxgetcustomasset = missing("function", getcustomasset or getsynasset)
hookfunction = missing("function", hookfunction)
hookmetamethod = missing("function", hookmetamethod)
getnamecallmethod = missing("function", getnamecallmethod or get_namecall_method)
checkcaller = missing("function", checkcaller, function() return false end)
newcclosure = missing("function", newcclosure)
getgc = missing("function", getgc or get_gc_objects)
setthreadidentity = missing("function", setthreadidentity or (syn and syn.set_thread_identity) or syn_context_set or setthreadcontext)
replicatesignal = missing("function", replicatesignal)

COREGUI = cloneref(game:GetService("CoreGui"))
Players = cloneref(game:GetService("Players"))
UserInputService = cloneref(game:GetService("UserInputService"))
TweenService = cloneref(game:GetService("TweenService"))
HttpService = cloneref(game:GetService("HttpService")) -- Used by peer sync
MarketplaceService = cloneref(game:GetService("MarketplaceService"))
RunService = cloneref(game:GetService("RunService"))
TeleportService = cloneref(game:GetService("TeleportService"))
StarterGui = cloneref(game:GetService("StarterGui"))
GuiService = cloneref(game:GetService("GuiService"))
Lighting = cloneref(game:GetService("Lighting"))
ContextActionService = cloneref(game:GetService("ContextActionService"))
ReplicatedStorage = cloneref(game:GetService("ReplicatedStorage"))
GroupService = cloneref(game:GetService("GroupService"))
PathService = cloneref(game:GetService("PathfindingService"))
SoundService = cloneref(game:GetService("SoundService"))
Teams = cloneref(game:GetService("Teams"))
StarterPlayer = cloneref(game:GetService("StarterPlayer"))
InsertService = cloneref(game:GetService("InsertService"))
ChatService = cloneref(game:GetService("Chat"))
ProximityPromptService = cloneref(game:GetService("ProximityPromptService"))
ContentProvider = cloneref(game:GetService("ContentProvider"))
StatsService = cloneref(game:GetService("Stats"))
MaterialService = cloneref(game:GetService("MaterialService"))
AvatarEditorService = cloneref(game:GetService("AvatarEditorService"))
TextService = cloneref(game:GetService("TextService"))
TextChatService = cloneref(game:GetService("TextChatService"))
CaptureService = cloneref(game:GetService("CaptureService"))
VoiceChatService = cloneref(game:GetService("VoiceChatService"))

IYMouse = cloneref(Players.LocalPlayer:GetMouse())
PlayerGui = cloneref(Players.LocalPlayer:FindFirstChildWhichIsA("PlayerGui"))
PlaceId, JobId = game.PlaceId, game.JobId
IsOnMobile = table.find({Enum.Platform.Android, Enum.Platform.IOS}, UserInputService:GetPlatform())
isLegacyChat = TextChatService.ChatVersion == Enum.ChatVersion.LegacyChatService


--[[
    F3X PEER SYNCHRONIZATION FRAMEWORK (CONCEPTUAL - REQUIRES EXTERNAL SETUP)

    This framework WILL NOT WORK OUT OF THE BOX. It requires YOU to:
    1. Set up an EXTERNAL HTTP RELAY SERVER and update `_G.F3X_PEER_SERVER_URL`.
    2. MANUALLY MODIFY the `f3x.lua` script (that this script downloads) to call
       `_G.SendF3XEdit(part, property, value)` whenever F3X makes an edit.
    Without these, the peer synchronization will not function.
]]
_G.F3X_PEER_SERVER_URL = "http://your-external-relay-server.com/f3x_edits" -- !!! IMPORTANT: Replace with your actual server URL !!!
_G.F3X_PEER_SYNC_INITIALIZED = false
_G.F3X_LAST_CHECK_TIMESTAMP_ID = "0" 

function _G.SerializeF3XValue(value)
    local valueType = typeof(value)
    local serializableValue = value
    local customType = valueType
    if valueType == "CFrame" then serializableValue = {value:GetComponents()}; customType = "CFrame"
    elseif valueType == "Color3" then serializableValue = {R=value.R, G=value.G, B=value.B}; customType = "Color3"
    elseif valueType == "Vector3" then serializableValue = {X=value.X, Y=value.Y, Z=value.Z}; customType = "Vector3"
    elseif valueType == "EnumItem" then serializableValue = {EnumType=value.EnumType.Name, Name=value.Name}; customType = "EnumItem"
    elseif valueType == "BrickColor" then serializableValue = value.Name; customType = "BrickColor"
    elseif valueType == "UDim2" then serializableValue = {XScale=value.X.Scale, XOffset=value.X.Offset, YScale=value.Y.Scale, YOffset=value.Y.Offset}; customType = "UDim2"
    end
    return serializableValue, customType
end

function _G.DeserializeF3XValue(receivedValue, valueType)
    local finalValue = receivedValue
    if valueType == "CFrame" and type(receivedValue) == "table" then finalValue = CFrame.new(unpack(receivedValue))
    elseif valueType == "Color3" and type(receivedValue) == "table" then finalValue = Color3.new(receivedValue.R, receivedValue.G, receivedValue.B)
    elseif valueType == "Vector3" and type(receivedValue) == "table" then finalValue = Vector3.new(receivedValue.X, receivedValue.Y, receivedValue.Z)
    elseif valueType == "EnumItem" and type(receivedValue) == "table" then
        if Enum[receivedValue.EnumType] and Enum[receivedValue.EnumType][receivedValue.Name] then finalValue = Enum[receivedValue.EnumType][receivedValue.Name] else return nil end
    elseif valueType == "BrickColor" then finalValue = BrickColor.new(receivedValue)
    elseif valueType == "UDim2" and type(receivedValue) == "table" then finalValue = UDim2.new(receivedValue.XScale, receivedValue.XOffset, receivedValue.YScale, receivedValue.YOffset)
    end
    return finalValue
end

function _G.SendF3XEdit(partInstance, propertyName, newValue)
    if not httprequest or not HttpService then return end
    if not partInstance or not पार्टInstance:IsA("Instance") or not partInstance.Parent then return end
    local partPath; local successPath, resultPath = pcall(function() return partInstance:GetFullName() end)
    if not successPath then return end; partPath = resultPath
    local serializableValue, valueType = _G.SerializeF3XValue(newValue)
    local payloadTable = {senderUserId = Players.LocalPlayer.UserId, timestamp = os.time(), partPath = partPath, propertyName = propertyName, value = serializableValue, valueType = valueType}
    local successEncode, payloadJson = pcall(HttpService.JSONEncode, HttpService, payloadTable)
    if not successEncode then return end
    pcall(function() httprequest({ Url = _G.F3X_PEER_SERVER_URL, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = payloadJson }) end)
end

function _G.ApplyF3XEdit(editData)
    if not editData or type(editData) ~= "table" or editData.senderUserId == Players.LocalPlayer.UserId then return end
    local rootService = game; local pathSegments = editData.partPath:split(".")
    if #pathSegments > 0 then local service = game:GetService(pathSegments[1])
        if service then rootService = service; table.remove(pathSegments, 1)
        else if game[pathSegments[1]] then rootService = game[pathSegments[1]]; table.remove(pathSegments, 1) else rootService = workspace end end
    else return end
    local targetPart = rootService
    for _, segment in ipairs(pathSegments) do targetPart = targetPart:FindFirstChild(segment); if not targetPart then return end end
    if not targetPart or not targetPart:IsA("Instance") then return end
    local propertyName = editData.propertyName; local finalValue = _G.DeserializeF3XValue(editData.value, editData.valueType)
    if finalValue == nil and editData.valueType ~= "nil" and editData.valueType ~= "boolean" then return end
    pcall(function() targetPart[propertyName] = finalValue end)
end

-- ... (iyassets, getcustomasset, makefolder logic, GUI Instance.new declarations, etc. from original script) ...
-- ... (all the way up to the function `InitializeAndRunF3XSystem` and `addcmd` definitions)

-- This function now handles loading F3X and initializing the peer sync system
function InitializeAndRunF3XSystem()
    if getgenv().F3XSystemLoaded then
        if typeof(notify) == "function" then notify("F3X", "F3X system already active.") end
        return
    end

    if typeof(notify) == "function" then notify("F3X", "Loading F3X Tool & Peer Sync Framework...") end

    if not _G.F3X_PEER_SYNC_INITIALIZED then
        _G.F3X_PEER_SYNC_INITIALIZED = true
        task.spawn(function()
            if typeof(notify) == "function" then 
                notify("F3X Peer Sync", "Polling for peer edits started. This REQUIRES your external relay server (see _G.F3X_PEER_SERVER_URL) AND manual modification of f3x.lua to send edits.")
            end
            while wait(1) do 
                if not httprequest or not HttpService or not _G.F3X_PEER_SYNC_INITIALIZED then
                    if not _G.F3X_PEER_SYNC_INITIALIZED then break end 
                    continue
                end
                local s, r = pcall(function() return httprequest({Url = _G.F3X_PEER_SERVER_URL .. "?since=" .. tostring(_G.F3X_LAST_CHECK_TIMESTAMP_ID) .. "&exclude_id=" .. Players.LocalPlayer.UserId, Method = "GET"}) end)
                if s and r and r.Success and r.Body then
                    local ds, resObj = pcall(HttpService.JSONDecode, HttpService, r.Body)
                    if ds and type(resObj)=="table" and type(resObj.edits)=="table" then
                        for _,eD in ipairs(resObj.edits) do if type(eD)=="table" then _G.ApplyF3XEdit(eD) end end
                        if resObj.next_since then _G.F3X_LAST_CHECK_TIMESTAMP_ID = tostring(resObj.next_since)
                        elseif #resObj.edits > 0 then local lE=resObj.edits[#resObj.edits]; if lE and (lE.timestamp or lE.id) then _G.F3X_LAST_CHECK_TIMESTAMP_ID = tostring(lE.timestamp or lE.id) else _G.F3X_LAST_CHECK_TIMESTAMP_ID = tostring(os.time()) end end
                    end
                end
            end
        end)
    end

    local f3xS_Suc, f3xS_Con = pcall(function() return game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/refs/heads/main/f3x.lua") end)
    if not f3xS_Suc or not f3xS_Con then
        if typeof(notify)=="function" then notify("F3X Error","Could not download f3x.lua: " .. tostring(f3xS_Con)) end; _G.F3X_PEER_SYNC_INITIALIZED=false; return
    end
    
    --[[
        CRITICAL USER ACTION REQUIRED:
        The 'f3x.lua' (f3xS_Con) code MUST BE MANUALLY EDITED by you.
        You need to find where F3X applies property changes and add:
           _G.SendF3XEdit(targetPartInstance, "PropertyName", newValue)
        This script CANNOT do this for you. Without it, peer sync WILL NOT SEND edits.
    ]]
    
    local f3xFunc, f3xLErr = loadstring(f3xS_Con, "f3x.lua_PeersyncContext")
    if f3xFunc then
        setfenv(f3xFunc, getfenv()) 
        local sC, cErr = pcall(f3xFunc)
        if sC then getgenv().F3XSystemLoaded=true; if typeof(notify)=="function" then notify("F3X","F3X tool GUI system loaded. Remember: Manual f3x.lua modification needed for peer sync to send edits.")end
        else if typeof(notify)=="function" then notify("F3X Load Error","Error executing f3x.lua: " .. tostring(cErr))end; _G.F3X_PEER_SYNC_INITIALIZED=false end
    else if typeof(notify)=="function" then notify("F3X Load Error","Error loading f3x.lua string: " .. tostring(f3xLErr))end; _G.F3X_PEER_SYNC_INITIALIZED=false end
end

-- Function to create the F3X Launcher Tool in the player's backpack
function CreateF3XLauncherTool()
    local localPlayer = Players.LocalPlayer
    if not localPlayer then 
        task.wait(1) -- Wait for player to be available
        localPlayer = Players.LocalPlayer
        if not localPlayer then
             print("Infinite Yield: LocalPlayer not found, cannot create F3X Launcher tool.")
             return
        end
    end

    local backpack = localPlayer:FindFirstChildOfClass("Backpack")
    if not backpack then
        -- Attempt to wait for backpack if player just joined
        local playerGui = localPlayer:FindFirstChildOfClass("PlayerGui")
        if playerGui then
            backpack = localPlayer:WaitForChild("Backpack", 5)
        end
        if not backpack then
            print("Infinite Yield: Backpack not found. F3X will try to auto-activate directly if this tool fails.")
            -- Fallback to direct activation if backpack method fails
            task.delay(2, function()
                if not getgenv().F3XSystemLoaded then
                    InitializeAndRunF3XSystem()
                end
            end)
            return
        end
    end

    if backpack:FindFirstChild("F3X Launcher Tool (IY)") then
        if typeof(notify) == "function" then notify("F3X", "Launcher tool already in inventory. Equip it or use ;f3x.") end
        return
    end

    local launcherTool = Instance.new("Tool")
    launcherTool.Name = "F3X Launcher Tool (IY)"
    launcherTool.ToolTip = "Equip this tool to activate the F3X Building GUI System."
    launcherTool.TextureID = "rbxassetid://1352543873" -- IY Logo as icon
    launcherTool.RequiresHandle = false 

    local activatedAlready = false
    local equipConnection
    equipConnection = launcherTool.Equipped:Connect(function()
        if activatedAlready and getgenv().F3XSystemLoaded then
             if typeof(notify) == "function" then notify("F3X Launcher", "F3X System is already active.") end
        else
            if typeof(notify) == "function" then notify("F3X Launcher", "Activating F3X Building GUI System...") end
            InitializeAndRunF3XSystem()
            activatedAlready = true 
        end
        
        task.wait(0.2) 
        if launcherTool.Parent == localPlayer.Character then
            local humanoid = localPlayer.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then humanoid:UnequipTools() end
        end
    end)
    
    -- Cleanup connection if tool is removed
    launcherTool.AncestryChanged:Connect(function(_, parent)
        if not parent and equipConnection then
            equipConnection:Disconnect()
            equipConnection = nil
        end
    end)

    launcherTool.Parent = backpack
    if typeof(notify) == "function" then
        notify("Infinite Yield", "F3X Launcher tool added to your inventory. Equip it to start the F3X GUI.")
    else
        print("Infinite Yield: F3X Launcher tool added to inventory. Equip it to start the F3X GUI.")
    end
end

-- ... (Define all other IY commands as in the original script) ...

-- Modify the existing f3x command to use the new initialization function
addcmd('f3x',{'fex'},function(args, speaker)
    InitializeAndRunF3XSystem()
end)

-- ... (All other commands and remaining script logic from original) ...

-- At the very end of the script, after all IY initializations are done:
task.spawn(function()
    wait(7) -- Wait for IY GUI and other things to settle

    -- Create the F3X Launcher tool in the player's backpack
    CreateF3XLauncherTool()

    -- Note: The F3X system itself will now only fully load and start polling
    -- when the launcher tool is equipped (or if the ;f3x command is used).
    -- The message about F3XSystemLoaded will appear after equipping the tool.
end)
